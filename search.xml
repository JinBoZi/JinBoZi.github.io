<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python脚本实现文件夹材料重排版]]></title>
    <url>%2Fpython_data_processing_assistent.html</url>
    <content type="text"><![CDATA[预期目标：原文件夹层级结构：根目录&nbsp;&nbsp;代码&nbsp;&nbsp;&nbsp;&nbsp;学生代码文件夹&nbsp;&nbsp;实验报告&nbsp;&nbsp;&nbsp;&nbsp;助教文件夹&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学生实验报告文件夹&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学生八次实验报告 目标文件夹层级结构：根目录&nbsp;&nbsp;助教文件夹&nbsp;&nbsp;&nbsp;&nbsp;学生文件夹&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学生代码文件夹&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;学生八次实验报告 主要思想：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为只有“助教文件夹”才能准确分开各个“学生文件夹”，所以先遍历“助教文件夹”下的所有目录名，以此匹配“代码”下的“学生代码文件夹”，再将每个学生两个文件夹下的材料都拷贝至新的文件夹结构内，最终完成了文件层级结构的转变。 代码实现：1234567891011121314151617181920212223242526272829303132333435363738394041424344import osimport os.pathimport shutilold_path = "I:\\U10P31010.02"#整理前的文件材料根路径new_path = "I:\\U10P31010.02(309-3)"#整理后文件材料保存的根路径'''作用：判断两文件名是否匹配(由于只需判断10位的学号，所以并没写兼容性很好的函数)val1：第一个文件名val2：第二个文件名返回值：1表示匹配，0表示不匹配'''def myEquel(val1,val2): for i in range(0,10): if(val1[i] != val2[i+3]): return 0 return 1'''变量含义 assistent：助教文件夹的名字 student_report：报告文件夹名字 student_code：代码文件夹名字'''#第一层循环 找到助教文件夹的名字，按助教分类for assistent in os.listdir(old_path+"\\实验报告"): #开始在新目录下整理，创建相应的助教文件夹 if not os.path.exists(new_path+"\\"+assistent): os.makedirs(new_path+"\\"+assistent) #第二层循环 查找每个助教文件夹下所有学生的文件夹名 for student_report in os.listdir(old_path + "\\实验报告\\" + assistent): #第三层循环 匹配每个学生的实验报告文件夹与代码文件夹 for student_code in os.listdir(old_path + "\\代码"): if(myEquel(student_report,student_code) == 1): #如果匹配，将材料转移到新目录 if not os.path.exists(new_path + "\\" + assistent + "\\" + student_code + "\\代码"): os.makedirs(new_path + "\\" + assistent + "\\" + student_code + "\\代码") #使用了系统的复制命令xcopy，感觉会快一点/e表示复制文件夹下所有内容 /y表示若重复可覆盖 “&gt; G:\\log.txt 2&gt;&amp;1”是为了屏蔽系统命令的提示信息 os.system("xcopy " + old_path + "\\代码\\" + student_code + " " + new_path + "\\" + assistent + "\\" + student_code + "\\代码 /e /y &gt; G:\\log.txt 2&gt;&amp;1") os.system("xcopy " + old_path + "\\实验报告\\" + assistent +"\\" + student_report + " " + new_path + "\\" + assistent + "\\" + student_code + " /e /y &gt; G:\\log.txt 2&gt;&amp;1") #打印提示信息 print(student_code+" is OK!\n") break 总结：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;代码还有许多不完善的地方，比如说函数写的太仓促，没有兼容性，代码也不太适合复用于其他场景。但感觉既然写了，就应该好好记录一下，权当积累一些经验吧~ 1、python 获取当前文件夹下所有文件名2、Python创建目录文件夹3、Python中执行系统命令常见的几种方法4、CMD命令——拷贝文件夹]]></content>
      <categories>
        <category>code</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用分布及其性质]]></title>
    <url>%2Fprobability_theory_formula.html</url>
    <content type="text"><![CDATA[概率论常用公式：1、统计量：$E\bar{X}=EX$,$D\bar{X}=\frac{1}{n}DX$,$ES_{n}^{2}=\frac{n-1}{n}DX$,$ES_{n}^{*}^{2}=DX$。 参考链接：1、简书：在Markdown中输入数学公式(MathJax)2、数学公式使用参考3、在线LaTeX公式编辑器]]></content>
      <categories>
        <category>课程学习</category>
        <category>数理统计</category>
      </categories>
      <tags>
        <tag>MathJax</tag>
        <tag>统计量</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用分布及其性质]]></title>
    <url>%2Fprobability_theory_distribution.html</url>
    <content type="text"><![CDATA[常见分布的期望和方差： table th:nth-of-type(1) { width: 20%; } table th:nth-of-type(2) { width: 40%; } table th:nth-of-type(3) { width: 20%; } table th:nth-of-type(4) { width: 20%; } 分布类型 概率密度函数 期望 方差 0-1分布 B(1,p) $p$ $pq$ 二项分布 B(n,p) $ {p_i}=P\left\{X=i\right\}={C^{i}_{n}}{p^i}{q^{n-1}} (q=1-p),(i=1,2,\ldots,n) $ $np$ $npq$ 泊松分布 P($\lambda$) $ p_{i}=P\left\{X=i\right\}=\frac{\lambda^{i}}{i!}e^{-\lambda } $ $\lambda$ $\lambda$ 均匀分布 U(a,b) $ f(x)=\frac{1}{b-a} $ $\frac{1}{b-a}$ $\frac{(b-a)^{2}}{12}$ 正态分布 N($\mu$,$\sigma^{2}$) $ f(x)=\frac{1}{\sqrt{2\pi}\sigma}e^{\frac{(x-\mu)^{2}}{2\sigma^{2}}} $ $\mu$ $\sigma^{2}$ 指数分布 E($\lambda$) $f(x)=\begin{cases}\lambda e^{-\lambda x},x&gt; 0\\ 0,x\leq 0\end{cases}$ $\frac{1}{\lambda}$ $\frac{1}{\lambda^{2}}$ 卡方分布 $\chi ^{2}(n)$ $X_{1},X_{2}…X_{n}$相互独立,且都服从标准正态分布N(0,1)$\chi _{2}=X_{1}^{2}+X_{2}^{2}+\cdots+X_{n}^{2}$ $n$ $2n$ $t$分布 $t$(n) $X\sim N(0,1)$&nbsp;$Y\sim x^{2}(n)$&nbsp;$t=\frac{X}{\sqrt{Y/n}}$ 0 $\frac{n}{n-2}(n\geq 2)$ F分布 F($n_{1}$,$n_{2}$) $X\sim \chi ^{2}(n_{1})$&nbsp;$X\sim \chi ^{2}(n_{2})$&nbsp;$F=\frac{X/n_{1}}{Y/n_{2}}$ $\frac{n_2}{n_{2}-2}$ $\frac{2n_{2}^{2}(n_{1}+n_{2}-2)}{n_{1}(n_{2}-2)^{2}(n_{2}-4)}$ 参考链接：1、简书：在Markdown中输入数学公式(MathJax)2、数学公式使用参考3、在线LaTeX公式编辑器]]></content>
      <categories>
        <category>课程学习</category>
        <category>数理统计</category>
      </categories>
      <tags>
        <tag>概率分布</tag>
        <tag>期望</tag>
        <tag>方差</tag>
        <tag>MathJax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[逻辑推理中的过河问题-C++代码解决方法]]></title>
    <url>%2Falgorithm_cross_river.html</url>
    <content type="text"><![CDATA[问题描述：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;话说有一家六口人，包括爸爸、妈妈、两个女儿及两个儿子在旅行途中迷了路，还不幸遇上了一个逃狱的犯人，幸好犯人让一个也在旅行的警察逮捕，一家六口才得以保住性命。他们只有通过一条河流方能回家，能帮帮他们么？ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;玩家的任务是，帮助这些人渡过河，交通工具只有一艘小船。只有爸爸、妈妈以及警察能控制小船，此外，不论成人或是小孩，小船每次最多只能搭乘二人。在渡河期间，玩家还要防止以下三种情况发生： 1、当警察与犯人分开时，犯人会伤害一家六口。2、当爸爸看见妈妈离开女儿时，爸爸便会教训女儿。3、当妈妈看见爸爸离开儿子时，妈妈便会教训儿子。 正确答案：1)警察带小偷先过河的对面，然后警察把小偷放下自己回来；2)警察再带儿子A过河，将儿子A放下，把小偷带回来；3)爸爸带儿子B过河，将儿子B放下，自己回来；4)爸爸带妈妈过河，上岸后，妈妈自己回来；5)警察再带小偷过河，警察和小偷都上岸，爸爸回来；6)爸爸和妈妈再过河，妈妈自己回来；7)妈妈带女儿A过河，妈妈和女儿A都上岸，警察带小偷回来；8)警察带女儿B过河，女儿B上岸后，警察自己回来；9)警察再带小偷过河就可以了。 主要思路：&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;递归实现，在每一次递归中，若判断出所有人都已过岸，则层层返回并在返回过程中打印结果；若还未成功过岸，遍历所有可能的过河方案，进入下一层递归；若过岸成功，打印结果，若过岸失败，则还原状态，继续循环检查下一状态。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;检查函数中主要判断是否存在几个伤害情况。过河前，警察要上船，犯人还留在岸上，且有其他家人在岸上；爸爸要上船，妈妈还留在岸上，且有儿子还在岸上；妈妈要上船，爸爸还留在岸上，且有女儿还在岸上。过河后，下船后，若警察不在本岸，犯人却在本岸，且有其他人在本岸；若爸爸不在本岸，妈妈却在本岸，且有儿子在本岸；若妈妈不在本岸，爸爸却在本岸，且有女儿在本岸。这些情况都会导致过河失败，应还原状态。 代码实现：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;cstdio&gt;using namespace std;int passager_one[15] = &#123;0 ,0,0,0,0,0,0,0,1 ,1,1,1,2 ,2,2&#125;;int passager_two[15] = &#123;-1,1,2,3,4,5,6,7,-1,2,4,5,-1,6,7&#125;;int bank[16] = &#123;1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0&#125;;int which_bank = 0;int check(int one,int two)&#123; if(bank[which_bank+one]==0 || (two!=-1 &amp;&amp; bank[which_bank+two]==0))return 0; //printf("%d %d\n",one,two); bank[which_bank+one]=0; if(two!=-1)bank[which_bank+two]=0; if(one==0 &amp;&amp; bank[which_bank+3]==1 &amp;&amp; (bank[which_bank+1]||bank[which_bank+2]||bank[which_bank+4]||bank[which_bank+5]||bank[which_bank+6]||bank[which_bank+7]))&#123; bank[which_bank+one]=1; if(two!=-1)bank[which_bank+two]=1; return 0; &#125; if((one==1||two==1) &amp;&amp; bank[which_bank+2]==1 &amp;&amp; (bank[which_bank+4]||bank[which_bank+5]))&#123; bank[which_bank+one]=1; if(two!=-1)bank[which_bank+two]=1; return 0; &#125; if((one==2||two==2) &amp;&amp; bank[which_bank+1]==1 &amp;&amp; (bank[which_bank+6]||bank[which_bank+7]))&#123; bank[which_bank+one]=1; if(two!=-1)bank[which_bank+two]=1; return 0; &#125; which_bank = (which_bank+8)%16; bank[which_bank+one]=1; if(two!=-1)bank[which_bank+two]=1; if(bank[which_bank]==0 &amp;&amp; bank[which_bank+3]==1 &amp;&amp; (bank[which_bank+1]||bank[which_bank+2]||bank[which_bank+4]||bank[which_bank+5]||bank[which_bank+6]||bank[which_bank+7]))&#123; bank[which_bank+one]=0; if(two!=-1)bank[which_bank+two]=0; which_bank = (which_bank+8)%16; bank[which_bank+one]=1; if(two!=-1)bank[which_bank+two]=1; return 0; &#125; if(bank[which_bank+1]==0 &amp;&amp; bank[which_bank+2]==1 &amp;&amp; (bank[which_bank+4]||bank[which_bank+5]))&#123; bank[which_bank+one]=0; if(two!=-1)bank[which_bank+two]=0; which_bank = (which_bank+8)%16; bank[which_bank+one]=1; if(two!=-1)bank[which_bank+two]=1; return 0; &#125; if(bank[which_bank+2]==0 &amp;&amp; bank[which_bank+1]==1 &amp;&amp; (bank[which_bank+6]||bank[which_bank+7]))&#123; bank[which_bank+one]=0; if(two!=-1)bank[which_bank+two]=0; which_bank = (which_bank+8)%16; bank[which_bank+one]=1; if(two!=-1)bank[which_bank+two]=1; return 0; &#125; return 1;&#125;int cross_river(int last_passagers)&#123; //printf("bank:%d",which_bank); //getchar(); if(which_bank == 8)&#123; int temp_sum=0; for(int index=8;index&lt;16;index++)temp_sum+=bank[index]; if(temp_sum == 8)return 1; &#125; for(int index=0;index&lt;15;index++)&#123; if(index!=last_passagers &amp;&amp; check(passager_one[index],passager_two[index]))&#123; //printf("%d %d %d\n",passager_one[index],passager_two[index],which_bank); //getchar(); if(cross_river(index))&#123; printf("%d %d %d\n",passager_one[index],passager_two[index]); return 1; &#125; else&#123; bank[which_bank+passager_one[index]]=0; if(passager_two[index]!=-1)bank[which_bank+passager_two[index]]=0; which_bank = (which_bank+8)%16; bank[which_bank+passager_one[index]]=1; if(passager_two[index]!=-1)bank[which_bank+passager_two[index]]=1; &#125; &#125; &#125; return 0;&#125;int main()&#123; cross_river(-1);&#125;]]></content>
      <categories>
        <category>code</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>递归算法</tag>
        <tag>逻辑题</tag>
      </tags>
  </entry>
</search>
